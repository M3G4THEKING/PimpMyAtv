# fake monster creator for poracle that sends an alert to poracle
#
# this was designed for axew cd.  in order to differentiate real spawns from fake spawns
# for this example, actual axew spawns will have a form of 0 and fakes will have a form of 1
# since poracle won't let you specify such from discord, you will need to edit the record in the db and restart poracle
#
# remember i hate python, so this is very hacky
# adjust values that you see fit, if you have to ask you shouldn't bother
#
# tested only on poracle
# verified working on June 4, 2023

import requests
from datetime import datetime, date, time, timedelta
import random
import time
import json
import numpy as np
from shapely.geometry import Point, Polygon

#START EDITING GENERAL SETTINGS HERE TO CHANGE BEHAVIOUR
#settings
pa_url = 'http://ip:port'

#odd of producing a spawn
# 0.25 for 1 in 4, 0.5 for 1 in 2, 0.75 for 3 in 4
spawnChance = 0.20

#enable pausing of execution to appear more random and not spawn on top of minute
workDelay = 1
workDelayMaxPause = 30

#pokemon_id
pokemonID = 7

#weather
weatherForecast = 3

#coordinate ranges, paste in array from koji for area with last coord removed
spawnPolygon = Polygon([[lat1,lon1],[lat2,lon1],[lat3,lon3],[lat4,lon4],[lat1,lon1]])

#levels for spawning
minLevel = 1
maxLevel = 30

#time range for spawns
minTime = 15
maxTime = 28

#base values for mon
baseHeight = 0.6
baseWeight = 18.0

#set variance for height & weight
varianceHeight = 0.3
varianceWeight = 0.5

#STOP EDITING GENERAL SETTINGS

# utility functions below
def fillFastMoves():
    moveData = {}

    moveData[0] = 221 # tackle
    moveData[1] = 237 # bubble

    return moveData


def fillChargeMoves():
    moveData = {}

    moveData[0] = 57  # aqua jet
    moveData[1] = 58  # aqua tail
    moveData[2] = 105  # water pulse

    return moveData


def fillMonsterData():
    levelData = {}

    levelData[1] = 11
    levelData[2] = 35
    levelData[3] = 60
    levelData[4] = 84
    levelData[5] = 109
    levelData[6] = 133
    levelData[7] = 157
    levelData[8] = 182
    levelData[9] = 206
    levelData[10] = 231
    levelData[11] = 254
    levelData[12] = 277
    levelData[13] = 300
    levelData[14] = 323
    levelData[15] = 346
    levelData[16] = 369
    levelData[17] = 392
    levelData[18] = 415
    levelData[19] = 439
    levelData[20] = 462
    levelData[21] = 485
    levelData[22] = 508
    levelData[23] = 531
    levelData[24] = 554
    levelData[25] = 577
    levelData[26] = 600
    levelData[27] = 623
    levelData[28] = 646
    levelData[29] = 670
    levelData[30] = 693
    levelData[31] = 704
    levelData[32] = 716
    levelData[33] = 727
    levelData[34] = 739
    levelData[35] = 750

    return levelData

def Random_Points_in_Polygon(polygon, number):
    points = []
    minx, miny, maxx, maxy = polygon.bounds
    while len(points) < number:
        pnt = Point(np.random.uniform(minx, maxx), np.random.uniform(miny, maxy))
        if polygon.contains(pnt):
            points.append(pnt)
    return points

#start main body of program that does stuff
if workDelay:
    pauseTIme = random.randint(0,workDelayMaxPause)
    print("Pausing " + str(pauseTIme) + "second(s)")
    time.sleep(pauseTIme)

monsterData = {}

#load mon level / cp / move data from function
levelCpData = fillMonsterData()
fastMoves = fillFastMoves()
chargeMoves = fillChargeMoves()

#figure out bounding box coords for scan area
spawnCoord = Random_Points_in_Polygon(spawnPolygon, 1)

#let's do the shit
if spawnChance < random.uniform(0.0, 1.0):
    print("Spawnfaker exiting early due to failed spawn chance")
    quit()

spawnLevel = random.randint(minLevel,maxLevel)
spawnMinutes = random.randint(minTime, maxTime)
spawnSeconds = random.randint(0,59)
move1 = fastMoves[random.randint(0, len(fastMoves) -1)]
move2 = chargeMoves[random.randint(0, len(chargeMoves) -1)]

body = {}

print(levelCpData)

body["pokemon_level"] = spawnLevel
body['cp'] = levelCpData[spawnLevel]

#unown
body['pokemon_id'] = pokemonID

body['gender'] = random.randint(1,2)
body['size'] = 5
body['encounter_id'] = "123456"
body['spawnpoint_id'] = "1"
body['cp_multiplier'] = 0.69

body["display_pokemon_id"] = None
body['latitude'] = spawnCoord[0].x
body['longitude'] = spawnCoord[0].y
body['pokestop_id'] = "None"
body['move_1'] = move1
body['move_2'] = move2
body['height'] = baseHeight + random.uniform( -1.0 * varianceHeight, varianceHeight)
body['weight'] = baseWeight + random.uniform( -1.0 * varianceWeight, varianceWeight)
body["disappear_time_verified"] = 'true'
body['form'] = 0
body['last_modified_time'] = int(time.time())
body["individual_defense"] = 15
body["individual_attack"] = 15
body["individual_stamina"] = 15
body["disappear_time"] = int(time.time()) + int(timedelta(minutes=spawnMinutes, seconds=spawnSeconds).total_seconds())
body["costume"] = 10
body["weather"] = weatherForecast

data_test = {}
data_test['type'] = "pokemon"
data_test['message'] = body

data_message = []
data_message.append(data_test)

data_string=json.dumps(data_message)

print(data_string)

# send to pokealarm
response = requests.post(url=pa_url, data=data_string, headers={"Content-Type": "application/json"}, timeout=5)
print ("poracle response = ",response)
